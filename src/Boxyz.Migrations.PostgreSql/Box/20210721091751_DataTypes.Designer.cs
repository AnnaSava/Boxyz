// <auto-generated />
using System;
using Boxyz.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Boxyz.Migrations.PostgreSql.Box
{
    [DbContext(typeof(BoxDbContext))]
    [Migration("20210721091751_DataTypes")]
    partial class DataTypes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Boxyz.Data.Entities.Box", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ShapeId")
                        .HasColumnType("bigint")
                        .HasColumnName("shape_id");

                    b.HasKey("Id")
                        .HasName("pk_boxes");

                    b.HasIndex("ShapeId")
                        .HasDatabaseName("ix_boxes_shape_id");

                    b.ToTable("boxes");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.BoxSide", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("BoxVersionId")
                        .HasColumnType("bigint")
                        .HasColumnName("box_version_id");

                    b.Property<long>("ShapeSideId")
                        .HasColumnType("bigint")
                        .HasColumnName("shape_side_id");

                    b.Property<string>("UniversalValue")
                        .HasColumnType("text")
                        .HasColumnName("universal_value");

                    b.HasKey("Id")
                        .HasName("pk_box_sides");

                    b.HasIndex("BoxVersionId")
                        .HasDatabaseName("ix_box_sides_box_version_id");

                    b.HasIndex("ShapeSideId")
                        .HasDatabaseName("ix_box_sides_shape_side_id");

                    b.ToTable("box_sides");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.BoxSideCulture", b =>
                {
                    b.Property<string>("Culture")
                        .HasColumnType("text")
                        .HasColumnName("culture");

                    b.Property<long>("ContentId")
                        .HasColumnType("bigint")
                        .HasColumnName("content_id");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Culture", "ContentId")
                        .HasName("pk_box_side_cultures");

                    b.HasIndex("ContentId")
                        .HasDatabaseName("ix_box_side_cultures_content_id");

                    b.ToTable("box_side_cultures");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.BoxSideFloat", b =>
                {
                    b.Property<long>("BoxSideId")
                        .HasColumnType("bigint")
                        .HasColumnName("box_side_id");

                    b.Property<string>("Measure")
                        .HasColumnType("text")
                        .HasColumnName("measure");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("BoxSideId")
                        .HasName("pk_box_side_floats");

                    b.ToTable("box_side_floats");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.BoxSideInteger", b =>
                {
                    b.Property<long>("BoxSideId")
                        .HasColumnType("bigint")
                        .HasColumnName("box_side_id");

                    b.Property<string>("Measure")
                        .HasColumnType("text")
                        .HasColumnName("measure");

                    b.Property<long>("Value")
                        .HasColumnType("bigint")
                        .HasColumnName("value");

                    b.HasKey("BoxSideId")
                        .HasName("pk_box_side_integers");

                    b.ToTable("box_side_integers");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.BoxSideLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("BoxSideId")
                        .HasColumnType("bigint")
                        .HasColumnName("box_side_id");

                    b.Property<long>("LinkedBoxVersionId")
                        .HasColumnType("bigint")
                        .HasColumnName("linked_box_version_id");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.HasKey("Id")
                        .HasName("pk_box_side_links");

                    b.HasIndex("BoxSideId")
                        .HasDatabaseName("ix_box_side_links_box_side_id");

                    b.HasIndex("LinkedBoxVersionId")
                        .HasDatabaseName("ix_box_side_links_linked_box_version_id");

                    b.ToTable("box_side_links");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.BoxSideMoney", b =>
                {
                    b.Property<long>("BoxSideId")
                        .HasColumnType("bigint")
                        .HasColumnName("box_side_id");

                    b.Property<string>("Currency")
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("BoxSideId")
                        .HasName("pk_box_side_moneys");

                    b.ToTable("box_side_moneys");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.BoxSidePoint", b =>
                {
                    b.Property<long>("BoxSideId")
                        .HasColumnType("bigint")
                        .HasColumnName("box_side_id");

                    b.Property<double>("X")
                        .HasColumnType("double precision")
                        .HasColumnName("x");

                    b.Property<double>("Y")
                        .HasColumnType("double precision")
                        .HasColumnName("y");

                    b.Property<double>("Z")
                        .HasColumnType("double precision")
                        .HasColumnName("z");

                    b.HasKey("BoxSideId")
                        .HasName("pk_box_side_points");

                    b.ToTable("box_side_points");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.BoxVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ContentId")
                        .HasColumnType("bigint")
                        .HasColumnName("content_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_approved");

                    b.Property<long>("ShapeVersionId")
                        .HasColumnType("bigint")
                        .HasColumnName("shape_version_id");

                    b.HasKey("Id")
                        .HasName("pk_box_versions");

                    b.HasIndex("ContentId")
                        .HasDatabaseName("ix_box_versions_content_id");

                    b.HasIndex("ShapeVersionId")
                        .HasDatabaseName("ix_box_versions_shape_version_id");

                    b.ToTable("box_versions");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.Shape", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("BoardId")
                        .HasColumnType("bigint")
                        .HasColumnName("board_id");

                    b.Property<string>("ConstName")
                        .HasColumnType("text")
                        .HasColumnName("const_name");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated");

                    b.HasKey("Id")
                        .HasName("pk_shapes");

                    b.HasIndex("BoardId")
                        .HasDatabaseName("ix_shapes_board_id");

                    b.ToTable("shapes");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.ShapeBoard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("ParentBoardId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_board_id");

                    b.Property<string>("Path")
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.HasKey("Id")
                        .HasName("pk_shape_boards");

                    b.HasIndex("ParentBoardId")
                        .HasDatabaseName("ix_shape_boards_parent_board_id");

                    b.ToTable("shape_boards");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.ShapeBoardCulture", b =>
                {
                    b.Property<string>("Culture")
                        .HasColumnType("text")
                        .HasColumnName("culture");

                    b.Property<long>("ContentId")
                        .HasColumnType("bigint")
                        .HasColumnName("content_id");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Culture", "ContentId")
                        .HasName("pk_shape_board_cultures");

                    b.HasIndex("ContentId")
                        .HasDatabaseName("ix_shape_board_cultures_content_id");

                    b.ToTable("shape_board_cultures");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.ShapeSide", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConstName")
                        .HasColumnType("text")
                        .HasColumnName("const_name");

                    b.Property<string>("DataType")
                        .HasColumnType("text")
                        .HasColumnName("data_type");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<long>("ShapeVersionId")
                        .HasColumnType("bigint")
                        .HasColumnName("shape_version_id");

                    b.HasKey("Id")
                        .HasName("pk_shape_sides");

                    b.HasIndex("ShapeVersionId")
                        .HasDatabaseName("ix_shape_sides_shape_version_id");

                    b.ToTable("shape_sides");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.ShapeSideCulture", b =>
                {
                    b.Property<string>("Culture")
                        .HasColumnType("text")
                        .HasColumnName("culture");

                    b.Property<long>("ContentId")
                        .HasColumnType("bigint")
                        .HasColumnName("content_id");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Culture", "ContentId")
                        .HasName("pk_shape_side_cultures");

                    b.HasIndex("ContentId")
                        .HasDatabaseName("ix_shape_side_cultures_content_id");

                    b.ToTable("shape_side_cultures");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.ShapeVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ContentId")
                        .HasColumnType("bigint")
                        .HasColumnName("content_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_approved");

                    b.HasKey("Id")
                        .HasName("pk_shape_versions");

                    b.HasIndex("ContentId")
                        .HasDatabaseName("ix_shape_versions_content_id");

                    b.ToTable("shape_versions");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.ShapeVersionCulture", b =>
                {
                    b.Property<string>("Culture")
                        .HasColumnType("text")
                        .HasColumnName("culture");

                    b.Property<long>("ContentId")
                        .HasColumnType("bigint")
                        .HasColumnName("content_id");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Culture", "ContentId")
                        .HasName("pk_shape_version_cultures");

                    b.HasIndex("ContentId")
                        .HasDatabaseName("ix_shape_version_cultures_content_id");

                    b.ToTable("shape_version_cultures");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.Box", b =>
                {
                    b.HasOne("Boxyz.Data.Entities.Shape", "Shape")
                        .WithMany()
                        .HasForeignKey("ShapeId")
                        .HasConstraintName("fk_boxes_shapes_shape_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shape");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.BoxSide", b =>
                {
                    b.HasOne("Boxyz.Data.Entities.BoxVersion", "BoxVersion")
                        .WithMany("Sides")
                        .HasForeignKey("BoxVersionId")
                        .HasConstraintName("fk_box_sides_box_versions_box_version_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Boxyz.Data.Entities.ShapeSide", "ShapeSide")
                        .WithMany()
                        .HasForeignKey("ShapeSideId")
                        .HasConstraintName("fk_box_sides_shape_sides_shape_side_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoxVersion");

                    b.Navigation("ShapeSide");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.BoxSideCulture", b =>
                {
                    b.HasOne("Boxyz.Data.Entities.BoxSide", "Content")
                        .WithMany("Cultures")
                        .HasForeignKey("ContentId")
                        .HasConstraintName("fk_box_side_cultures_box_sides_content_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.BoxSideFloat", b =>
                {
                    b.HasOne("Boxyz.Data.Entities.BoxSide", "BoxSide")
                        .WithOne("Float")
                        .HasForeignKey("Boxyz.Data.Entities.BoxSideFloat", "BoxSideId")
                        .HasConstraintName("fk_box_side_floats_box_sides_box_side_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoxSide");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.BoxSideInteger", b =>
                {
                    b.HasOne("Boxyz.Data.Entities.BoxSide", "BoxSide")
                        .WithOne("Integer")
                        .HasForeignKey("Boxyz.Data.Entities.BoxSideInteger", "BoxSideId")
                        .HasConstraintName("fk_box_side_integers_box_sides_box_side_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoxSide");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.BoxSideLink", b =>
                {
                    b.HasOne("Boxyz.Data.Entities.BoxSide", "BoxSide")
                        .WithMany("Links")
                        .HasForeignKey("BoxSideId")
                        .HasConstraintName("fk_box_side_links_box_sides_box_side_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Boxyz.Data.Entities.BoxVersion", "LinkedBoxVersion")
                        .WithMany()
                        .HasForeignKey("LinkedBoxVersionId")
                        .HasConstraintName("fk_box_side_links_box_versions_linked_box_version_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoxSide");

                    b.Navigation("LinkedBoxVersion");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.BoxSideMoney", b =>
                {
                    b.HasOne("Boxyz.Data.Entities.BoxSide", "BoxSide")
                        .WithOne("Money")
                        .HasForeignKey("Boxyz.Data.Entities.BoxSideMoney", "BoxSideId")
                        .HasConstraintName("fk_box_side_moneys_box_sides_box_side_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoxSide");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.BoxSidePoint", b =>
                {
                    b.HasOne("Boxyz.Data.Entities.BoxSide", "BoxSide")
                        .WithOne("Point")
                        .HasForeignKey("Boxyz.Data.Entities.BoxSidePoint", "BoxSideId")
                        .HasConstraintName("fk_box_side_points_box_sides_box_side_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoxSide");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.BoxVersion", b =>
                {
                    b.HasOne("Boxyz.Data.Entities.Box", "Content")
                        .WithMany("Versions")
                        .HasForeignKey("ContentId")
                        .HasConstraintName("fk_box_versions_boxes_content_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Boxyz.Data.Entities.ShapeVersion", "ShapeVersion")
                        .WithMany()
                        .HasForeignKey("ShapeVersionId")
                        .HasConstraintName("fk_box_versions_shape_versions_shape_version_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("ShapeVersion");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.Shape", b =>
                {
                    b.HasOne("Boxyz.Data.Entities.ShapeBoard", "Board")
                        .WithMany()
                        .HasForeignKey("BoardId")
                        .HasConstraintName("fk_shapes_shape_boards_board_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.ShapeBoard", b =>
                {
                    b.HasOne("Boxyz.Data.Entities.ShapeBoard", "ParentBoard")
                        .WithMany("ChildBoards")
                        .HasForeignKey("ParentBoardId")
                        .HasConstraintName("fk_shape_boards_shape_boards_parent_board_id");

                    b.Navigation("ParentBoard");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.ShapeBoardCulture", b =>
                {
                    b.HasOne("Boxyz.Data.Entities.ShapeBoard", "Content")
                        .WithMany("Cultures")
                        .HasForeignKey("ContentId")
                        .HasConstraintName("fk_shape_board_cultures_shape_boards_content_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.ShapeSide", b =>
                {
                    b.HasOne("Boxyz.Data.Entities.ShapeVersion", "ShapeVersion")
                        .WithMany("Sides")
                        .HasForeignKey("ShapeVersionId")
                        .HasConstraintName("fk_shape_sides_shape_versions_shape_version_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShapeVersion");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.ShapeSideCulture", b =>
                {
                    b.HasOne("Boxyz.Data.Entities.ShapeSide", "Content")
                        .WithMany("Cultures")
                        .HasForeignKey("ContentId")
                        .HasConstraintName("fk_shape_side_cultures_shape_sides_content_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.ShapeVersion", b =>
                {
                    b.HasOne("Boxyz.Data.Entities.Shape", "Content")
                        .WithMany("Versions")
                        .HasForeignKey("ContentId")
                        .HasConstraintName("fk_shape_versions_shapes_content_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.ShapeVersionCulture", b =>
                {
                    b.HasOne("Boxyz.Data.Entities.ShapeVersion", "Content")
                        .WithMany("Cultures")
                        .HasForeignKey("ContentId")
                        .HasConstraintName("fk_shape_version_cultures_shape_versions_content_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.Box", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.BoxSide", b =>
                {
                    b.Navigation("Cultures");

                    b.Navigation("Float");

                    b.Navigation("Integer");

                    b.Navigation("Links");

                    b.Navigation("Money");

                    b.Navigation("Point");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.BoxVersion", b =>
                {
                    b.Navigation("Sides");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.Shape", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.ShapeBoard", b =>
                {
                    b.Navigation("ChildBoards");

                    b.Navigation("Cultures");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.ShapeSide", b =>
                {
                    b.Navigation("Cultures");
                });

            modelBuilder.Entity("Boxyz.Data.Entities.ShapeVersion", b =>
                {
                    b.Navigation("Cultures");

                    b.Navigation("Sides");
                });
#pragma warning restore 612, 618
        }
    }
}
